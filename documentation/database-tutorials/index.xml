<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Using the Database on Qdrant - Vector Database</title><link>https://qdrant.tech/documentation/database-tutorials/</link><description>Recent content in Using the Database on Qdrant - Vector Database</description><generator>Hugo</generator><language>en-us</language><managingEditor>info@qdrant.tech (Andrey Vasnetsov)</managingEditor><webMaster>info@qdrant.tech (Andrey Vasnetsov)</webMaster><atom:link href="https://qdrant.tech/documentation/database-tutorials/index.xml" rel="self" type="application/rss+xml"/><item><title>Bulk Upload Vectors</title><link>https://qdrant.tech/documentation/database-tutorials/bulk-upload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>info@qdrant.tech (Andrey Vasnetsov)</author><guid>https://qdrant.tech/documentation/database-tutorials/bulk-upload/</guid><description>&lt;h1 id="bulk-upload-vectors-to-a-qdrant-collection">Bulk Upload Vectors to a Qdrant Collection&lt;/h1>
&lt;p>Uploading a large-scale dataset fast might be a challenge, but Qdrant has a few tricks to help you with that.&lt;/p>
&lt;p>The first important detail about data uploading is that the bottleneck is usually located on the client side, not on the server side.
This means that if you are uploading a large dataset, you should prefer a high-performance client library.&lt;/p>
&lt;p>We recommend using our &lt;a href="https://github.com/qdrant/rust-client" target="_blank" rel="noopener nofollow">Rust client library&lt;/a> for this purpose, as it is the fastest client library available for Qdrant.&lt;/p></description></item><item><title>Create &amp; Restore Snapshots</title><link>https://qdrant.tech/documentation/database-tutorials/create-snapshot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>info@qdrant.tech (Andrey Vasnetsov)</author><guid>https://qdrant.tech/documentation/database-tutorials/create-snapshot/</guid><description>&lt;h1 id="backup-and-restore-qdrant-collections-using-snapshots">Backup and Restore Qdrant Collections Using Snapshots&lt;/h1>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Time: 20 min&lt;/th>
 &lt;th>Level: Beginner&lt;/th>
 &lt;th>&lt;/th>
 &lt;th>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;/tbody>
&lt;/table>
&lt;p>A collection is a basic unit of data storage in Qdrant. It contains vectors, their IDs, and payloads. However, keeping the search efficient requires additional data structures to be built on top of the data. Building these data structures may take a while, especially for large collections.
That&amp;rsquo;s why using snapshots is the best way to export and import Qdrant collections, as they contain all the bits and pieces required to restore the entire collection efficiently.&lt;/p></description></item><item><title>Large Scale Search</title><link>https://qdrant.tech/documentation/database-tutorials/large-scale-search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>info@qdrant.tech (Andrey Vasnetsov)</author><guid>https://qdrant.tech/documentation/database-tutorials/large-scale-search/</guid><description>&lt;h1 id="upload-and-search-large-collections-cost-efficiently">Upload and Search Large collections cost-efficiently&lt;/h1>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Time: 2 days&lt;/th>
 &lt;th>Level: Advanced&lt;/th>
 &lt;th>&lt;/th>
 &lt;th>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;/tbody>
&lt;/table>
&lt;p>In this tutorial, we will describe an approach to upload, index, and search a large volume of data cost-efficiently,
on an example of the real-world dataset &lt;a href="https://laion.ai/blog/laion-400-open-dataset/" target="_blank" rel="noopener nofollow">LAION-400M&lt;/a>.&lt;/p>
&lt;p>The goal of this tutorial is to demonstrate what minimal amount of resources is required to index and search a large dataset,
while still maintaining a reasonable search latency and accuracy.&lt;/p></description></item><item><title>Load a HuggingFace Dataset</title><link>https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>info@qdrant.tech (Andrey Vasnetsov)</author><guid>https://qdrant.tech/documentation/database-tutorials/huggingface-datasets/</guid><description>&lt;h1 id="load-and-search-hugging-face-datasets-with-qdrant">Load and Search Hugging Face Datasets with Qdrant&lt;/h1>
&lt;p>&lt;a href="https://huggingface.co/" target="_blank" rel="noopener nofollow">Hugging Face&lt;/a> provides a platform for sharing and using ML models and
datasets. &lt;a href="https://huggingface.co/Qdrant" target="_blank" rel="noopener nofollow">Qdrant&lt;/a> also publishes datasets along with the
embeddings that you can use to practice with Qdrant and build your applications based on semantic
search. &lt;strong>Please &lt;a href="https://qdrant.to/discord" target="_blank" rel="noopener nofollow">let us know&lt;/a> if you&amp;rsquo;d like to see a specific dataset!&lt;/strong>&lt;/p>
&lt;h2 id="arxiv-titles-instructorxl-embeddings">arxiv-titles-instructorxl-embeddings&lt;/h2>
&lt;p>&lt;a href="https://huggingface.co/datasets/Qdrant/arxiv-titles-instructorxl-embeddings" target="_blank" rel="noopener nofollow">This dataset&lt;/a> contains
embeddings generated from the paper titles only. Each vector has a payload with the title used to
create it, along with the DOI (Digital Object Identifier).&lt;/p></description></item><item><title>Build With Async API</title><link>https://qdrant.tech/documentation/database-tutorials/async-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>info@qdrant.tech (Andrey Vasnetsov)</author><guid>https://qdrant.tech/documentation/database-tutorials/async-api/</guid><description>&lt;h1 id="using-qdrants-async-api-for-efficient-python-applications">Using Qdrantâ€™s Async API for Efficient Python Applications&lt;/h1>
&lt;p>Asynchronous programming is being broadly adopted in the Python ecosystem. Tools such as FastAPI &lt;a href="https://fastapi.tiangolo.com/async/" target="_blank" rel="noopener nofollow">have embraced this new
paradigm&lt;/a>, but it is also becoming a standard for ML models served as SaaS. For example, the Cohere SDK
&lt;a href="https://github.com/cohere-ai/cohere-python/blob/856a4c3bd29e7a75fa66154b8ac9fcdf1e0745e0/src/cohere/client.py#L189" target="_blank" rel="noopener nofollow">provides an async client&lt;/a> next to its synchronous counterpart.&lt;/p>
&lt;p>Databases are often launched as separate services and are accessed via a network. All the interactions with them are IO-bound and can
be performed asynchronously so as not to waste time actively waiting for a server response. In Python, this is achieved by
using &lt;a href="https://docs.python.org/3/library/asyncio-task.html" target="_blank" rel="noopener nofollow">&lt;code>async/await&lt;/code>&lt;/a> syntax. That lets the interpreter switch to another task
while waiting for a response from the server.&lt;/p></description></item></channel></rss>